{"ast":null,"code":"var _jsxFileName = \"/Users/mehmet/Desktop/WebDEvLearning/Portfolio/onlinelibrary/src/components/Genre/Genre.component.jsx\";\nimport React, { useContext } from 'react';\nimport './genre.styles.scss';\nimport DirectoryItem from '../directory-item/directory-item.component';\nimport { directoryContext } from '../provider/directory.provider';\nimport BookModal from '../book-modal/book-modal.component';\n\nfunction Genre({\n  match\n}) {\n  const {\n    params: {\n      genreid\n    }\n  } = match;\n  const {\n    directory\n  } = useContext(directoryContext); //Get directory of item\n\n  let {\n    bookList\n  } = directory[genreid]; //Get the bookList properties of the selected genre\n\n  let list = bookList.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"genre-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DirectoryItem, {\n    bookName: item.bookName,\n    bookImage: item.bookImage,\n    bookAuthor: item.bookAuthor,\n    bookDescription: item.bookDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  }))));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, directory[genreid].title.toUpperCase(), \" \"), list != null ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"genre-items-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, list, list, list) : null);\n}\n\nexport default Genre;","map":{"version":3,"sources":["/Users/mehmet/Desktop/WebDEvLearning/Portfolio/onlinelibrary/src/components/Genre/Genre.component.jsx"],"names":["React","useContext","DirectoryItem","directoryContext","BookModal","Genre","match","params","genreid","directory","bookList","list","map","item","id","bookName","bookImage","bookAuthor","bookDescription","title","toUpperCase"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,4CAA1B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAOC,SAAP,MAAsB,oCAAtB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA0B;AACtB,QAAM;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,MAA0BF,KAAhC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAgBR,UAAU,CAACE,gBAAD,CAAhC,CAFsB,CAE8B;;AACpD,MAAI;AAAEO,IAAAA;AAAF,MAAeD,SAAS,CAACD,OAAD,CAA5B,CAHsB,CAGiB;;AACvC,MAAIG,IAAI,GAAGD,QAAQ,CAACE,GAAT,CAAaC,IAAI,iBACxB;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AACI,IAAA,QAAQ,EAAED,IAAI,CAACE,QADnB;AAEI,IAAA,SAAS,EAAEF,IAAI,CAACG,SAFpB;AAGI,IAAA,UAAU,EAAEH,IAAI,CAACI,UAHrB;AAII,IAAA,eAAe,EAAEJ,IAAI,CAACK,eAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADO,CAAX;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,SAAS,CAACD,OAAD,CAAT,CAAmBW,KAAnB,CAAyBC,WAAzB,EAAL,MADJ,EAGQT,IAAI,IAAI,IAAR,gBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,IADL,EAEKA,IAFL,EAGKA,IAHL,CADJ,GAKa,IARrB,CADJ;AAaH;;AAED,eAAeN,KAAf","sourcesContent":["import React, { useContext } from 'react';\nimport './genre.styles.scss';\nimport DirectoryItem from '../directory-item/directory-item.component';\nimport { directoryContext } from '../provider/directory.provider';\nimport BookModal from '../book-modal/book-modal.component';\n\nfunction Genre({ match }) {\n    const { params: { genreid } } = match;\n    const { directory } = useContext(directoryContext); //Get directory of item\n    let { bookList } = directory[genreid]; //Get the bookList properties of the selected genre\n    let list = bookList.map(item =>\n        <div key={item.id}>\n            <div className=\"genre-item\">\n                <DirectoryItem\n                    bookName={item.bookName}\n                    bookImage={item.bookImage}\n                    bookAuthor={item.bookAuthor}\n                    bookDescription={item.bookDescription}\n                />\n            </div>\n        </div>\n    );\n    return (\n        <div className=\"title\">\n            <h1>{directory[genreid].title.toUpperCase()} </h1>\n            {\n                list != null ?\n                    <div className=\"genre-items-container\">\n                        {list}\n                        {list}\n                        {list}\n                    </div> : null\n            }\n        </div>\n    )\n}\n\nexport default Genre;\n"]},"metadata":{},"sourceType":"module"}