{"ast":null,"code":"var _jsxFileName = \"/Users/mehmet/Desktop/WebDEvLearning/ReactApps/onlinelibrary/src/components/login-page/login-page.component.jsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './login-page.styles.scss';\nimport firebase from \"../../assets/Firebase/firebase\";\nimport \"firebase/auth\";\nimport { TextField, Button } from '@material-ui/core';\nimport { UserContext } from '../provider/user.provider';\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nfunction LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const {\n    dispatch\n  } = useContext(UserContext);\n\n  const handleGoogleSignIn = () => {\n    provider.setCustomParameters({\n      prompt: 'select_account'\n    });\n    auth.signInWithPopup(provider).then(function (result) {// This gives you a Google Access Token. You can use it to access the Google API.\n      //token = result.credential.accessToken;\n      // The signed-in user info.\n      //result.user;\n    });\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      console.log(user);\n    });\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    auth().createUserWithEmailAndPassword(email, password).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      alert(errorMessage);\n    }); //dispatch({ type: 'LOG_IN_USER', user: { name: 'Name', logged: true } });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    type: \"submit\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    autoComplete: \"off\",\n    label: \"Email\",\n    name: \"email\",\n    type: \"email\",\n    onChange: event => setEmail(event.target.value),\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Password\",\n    name: \"password\",\n    type: \"password\",\n    onChange: event => setPassword(event.target.value),\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 20\n    }\n  }, \"New User?\")), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleGoogleSignIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Sign in with Google\"));\n}\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/mehmet/Desktop/WebDEvLearning/ReactApps/onlinelibrary/src/components/login-page/login-page.component.jsx"],"names":["React","useState","useContext","useEffect","Link","firebase","TextField","Button","UserContext","auth","provider","GoogleAuthProvider","LoginPage","email","setEmail","password","setPassword","dispatch","handleGoogleSignIn","setCustomParameters","prompt","signInWithPopup","then","result","onAuthStateChanged","user","console","log","handleSubmit","e","preventDefault","createUserWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","alert","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './login-page.styles.scss';\n\nimport firebase from \"../../assets/Firebase/firebase\";\nimport \"firebase/auth\";\n\nimport { TextField, Button } from '@material-ui/core';\nimport { UserContext } from '../provider/user.provider';\n\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\nfunction LoginPage() {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const { dispatch } = useContext(UserContext);\n\n    const handleGoogleSignIn = () => {\n        provider.setCustomParameters({ prompt: 'select_account' });\n        auth.signInWithPopup(provider).then(function (result) {\n            // This gives you a Google Access Token. You can use it to access the Google API.\n            //token = result.credential.accessToken;\n            // The signed-in user info.\n            //result.user;\n        });\n    }\n    useEffect(() => {\n        auth.onAuthStateChanged(user => {\n            console.log(user);\n        })\n    });\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        auth().createUserWithEmailAndPassword(email, password).catch(function (error) {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            alert(errorMessage);\n        });\n        //dispatch({ type: 'LOG_IN_USER', user: { name: 'Name', logged: true } });\n    }\n    return (\n        <div className='container-form'>\n            <form type='submit' onSubmit={handleSubmit}>\n                <TextField\n                    autoComplete=\"off\"\n                    label=\"Email\"\n                    name=\"email\"\n                    type='email'\n                    onChange={event => setEmail(event.target.value)}\n                    value={email}\n                />\n                <TextField\n                    label=\"Password\"\n                    name=\"password\"\n                    type='password'\n                    onChange={event => setPassword(event.target.value)}\n                    value={password}\n                />\n                <Button type='submit' variant=\"contained\" color=\"primary\">Submit</Button>\n            </form>\n            <small><Link to=\"/register\">New User?</Link></small>\n\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleGoogleSignIn}>Sign in with Google</Button>\n        </div >\n    )\n}\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}